class BinTreeNode(object):
 
    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None
 
 
       
def tree_insert( tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        else:
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree
 
def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)
 
"""def in_order(tree):
    if(tree.left!=None):
        in_order(tree.left)
    print (tree.value)
    if(tree.right!=None):
        in_order(tree.right)"""

def in_order(tree):#define the function
    nodelist=[]#build an empty nodelist
    notsorted = True
    while notsorted is True: #sort the node in ascending order until notsorted become false
        if tree is not None:  #if the tree node is not None, the node is append to the node list
            nodelist.append(tree)
            tree = tree.left
        elif(len(nodelist) > 0):#if the nodelist length is greater than 0, then print them out of the list
            tree = nodelist.pop()#kick it from the list and print it(from the end of the list)
            print(tree.value)
            tree = tree.right
        else:
            notsorted is False#the end of the loop


 
if __name__ == '__main__':
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  print('In Order:')
  in_order(t)
